name: Build and Deploy Manylinux Wheels

# Trigger workflow on PRs, tags, and manual dispatch
on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      torch_version:
        description: 'PyTorch version to build (e.g., 2.4.0)'
        required: false
        default: ''
      cuda_version:
        description: 'CUDA version to build (e.g., cu121, cpu)'
        required: false
        default: ''

jobs:
  build-manylinux-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # PyTorch 2.4.x with multiple CUDA versions
          - torch-version: '2.4.0'
            torch-cuda: 'cu118'
            cuda-version: '11.8'
          - torch-version: '2.4.0'
            torch-cuda: 'cu121'
            cuda-version: '12.1'
          - torch-version: '2.4.0'
            torch-cuda: 'cu124'
            cuda-version: '12.4'
          - torch-version: '2.4.0'
            torch-cuda: 'cpu'
            cuda-version: 'none'

          # PyTorch 2.5.x with multiple CUDA versions
          - torch-version: '2.5.0'
            torch-cuda: 'cu118'
            cuda-version: '11.8'
          - torch-version: '2.5.0'
            torch-cuda: 'cu121'
            cuda-version: '12.1'
          - torch-version: '2.5.0'
            torch-cuda: 'cu124'
            cuda-version: '12.4'
          - torch-version: '2.5.0'
            torch-cuda: 'cpu'
            cuda-version: 'none'

          # PyTorch 2.6.x with multiple CUDA versions
          - torch-version: '2.6.0'
            torch-cuda: 'cu118'
            cuda-version: '11.8'
          - torch-version: '2.6.0'
            torch-cuda: 'cu121'
            cuda-version: '12.1'
          - torch-version: '2.6.0'
            torch-cuda: 'cu124'
            cuda-version: '12.4'
          - torch-version: '2.6.0'
            torch-cuda: 'cu126'
            cuda-version: '12.6'
          - torch-version: '2.6.0'
            torch-cuda: 'cpu'
            cuda-version: 'none'


    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel

    - name: Build manylinux wheels
      env:
        CIBW_BEFORE_BUILD: |
          pip install --upgrade pip setuptools wheel setuptools-scm
          if [ "${{ matrix.torch-cuda }}" = "cpu" ]; then
            pip install torch==${{ matrix.torch-version }}+cpu --index-url https://download.pytorch.org/whl/cpu
          else
            pip install torch==${{ matrix.torch-version }}+${{ matrix.torch-cuda }} --index-url https://download.pytorch.org/whl/${{ matrix.torch-cuda }}
          fi
          pip install numpy
          if [ "${{ matrix.cuda-version }}" != "none" ]; then
            export CUDA_HOME=/usr/local/cuda-${{ matrix.cuda-version }}
            export PATH=$CUDA_HOME/bin:$PATH
            export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
          fi
        TORCH_CUDA_VERSION: ${{ matrix.cuda-version }}
        TORCH_CUDA_ARCH_LIST: "8.0;8.6;8.9;9.0;10.0;12.0;+PTX"
      run: |
        cibuildwheel --platform linux

    - name: Rename wheels to PyTorch ecosystem convention
      run: |
        # Get version from git tag or fallback
        VERSION=$(git describe --tags --dirty 2>/dev/null | sed 's/^v//' || echo "0.8.1")

        # Rename all wheels in wheelhouse
        for wheel in wheelhouse/*.whl; do
          if [ -f "$wheel" ]; then
            WHEEL_NAME=$(basename "$wheel")
            # Extract parts: torch_harmonics-0.8.1-cp310-cp310-linux_x86_64.whl
            IFS='-' read -ra PARTS <<< "$WHEEL_NAME"

            # Create new name with CUDA suffix: torch_harmonics-0.8.1+cu121-cp310-cp310-linux_x86_64.whl
            NEW_NAME="${PARTS[0]}-${PARTS[1]}+${{ matrix.torch-cuda }}-${PARTS[2]}-${PARTS[3]}-${PARTS[4]}"

            # Rename the wheel
            mv "$wheel" "wheelhouse/$NEW_NAME"
            echo "âœ… Renamed wheel to: $NEW_NAME"
          fi
        done

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheel-torch-${{ matrix.torch-version }}-${{ matrix.torch-cuda }}
        path: wheelhouse/*.whl

    - name: Upload to TestPyPI (for testing)
      if: github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
      run: |
        python -m pip install twine
        python -m twine upload --repository testpypi wheelhouse/*.whl

    - name: Upload to PyPI (production)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m pip install twine
        python -m twine upload wheelhouse/*.whl
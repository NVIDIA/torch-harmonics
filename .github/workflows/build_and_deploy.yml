name: Build and Deploy Manylinux Wheels

# Trigger workflow on PRs, tags, and manual dispatch
on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      torch_version:
        description: 'PyTorch version to build (e.g., 2.4.0)'
        required: false
        default: ''
      cuda_version:
        description: 'CUDA version to build (e.g., cu121, cpu)'
        required: false
        default: ''

env:
  CUDA_ARCH_MAP: '{"11.8": "8.0;8.6;8.9;+PTX", "12.1": "8.0;8.6;8.9;9.0;+PTX", "12.4": "8.0;8.6;8.9;9.0;+PTX", "12.6": "8.0;8.6;8.9;9.0;+PTX", "12.8": "8.0;8.6;8.9;9.0;10.0;12.0;+PTX", "none": ""}'

jobs:
  build-manylinux-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # # PyTorch 2.4.x with multiple CUDA versions
          # - torch-version: '2.4.0'
          #   torch-cuda: 'cpu'
          #   cuda-version: 'none'
          # - torch-version: '2.4.0'
          #   torch-cuda: 'cu118'
          #   cuda-version: '11.8'
          # - torch-version: '2.4.0'
          #   torch-cuda: 'cu121'
          #   cuda-version: '12.1'
          # - torch-version: '2.4.0'
          #   torch-cuda: 'cu124'
          #   cuda-version: '12.4'

          # # PyTorch 2.5.x with multiple CUDA versions
          # - torch-version: '2.5.0'
          #   torch-cuda: 'cpu'
          #   cuda-version: 'none'
          # - torch-version: '2.5.0'
          #   torch-cuda: 'cu118'
          #   cuda-version: '11.8'
          # - torch-version: '2.5.0'
          #   torch-cuda: 'cu121'
          #   cuda-version: '12.1'
          # - torch-version: '2.5.0'
          #   torch-cuda: 'cu124'
          #   cuda-version: '12.4'

          # PyTorch 2.6.x with multiple CUDA versions
          # - torch-version: '2.6.0'
          #   torch-cuda: 'cpu'
          #   cuda-version: 'none'
          # - torch-version: '2.6.0'
          #   torch-cuda: 'cu118'
          #   cuda-version: '11.8'
          # - torch-version: '2.6.0'
          #   torch-cuda: 'cu124'
          #   cuda-version: '12.4'
          # - torch-version: '2.6.0'
          #   torch-cuda: 'cu126'
          #   cuda-version: '12.6'

          # PyTorch 2.7.x with multiple CUDA versions
          - torch-version: '2.7.0'
            torch-cuda: 'cpu'
            cuda-version: 'none'
          # - torch-version: '2.7.0'
          #   torch-cuda: 'cu118'
          #   cuda-version: '11.8'
          # - torch-version: '2.7.0'
          #   torch-cuda: 'cu126'
          #   cuda-version: '12.6'
          # - torch-version: '2.7.0'
          #   torch-cuda: 'cu128'
          #   cuda-version: '12.8'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel

    - name: Set CUDA architecture list
      run: |
        ARCH_LIST=$(echo "$CUDA_ARCH_MAP" | jq -r '.["${{ matrix.cuda-version }}"]')
        echo "TORCH_CUDA_ARCH_LIST=$ARCH_LIST" >> $GITHUB_ENV

    - name: Build manylinux wheels
      env:
        CIBW_BEFORE_BUILD: |
          pip install --upgrade pip setuptools wheel setuptools-scm
          if [ "${{ matrix.torch-cuda }}" = "cpu" ]; then
            pip install torch==${{ matrix.torch-version }}+cpu --index-url https://download.pytorch.org/whl/cpu
          else
            pip install torch==${{ matrix.torch-version }}+${{ matrix.torch-cuda }} --index-url https://download.pytorch.org/whl/${{ matrix.torch-cuda }}
          fi
          pip install numpy
          export TORCH_HARMONICS_ENABLE_OPENMP=1
          if [ "${{ matrix.cuda-version }}" != "none" ]; then
            export CUDA_HOME=/usr/local/cuda-${{ matrix.cuda-version }}
            export PATH=$CUDA_HOME/bin:$PATH
            export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
          fi
        CIBW_BEFORE_TEST: |
          echo "Installing PyTorch for testing..."
          if [ "${{ matrix.torch-cuda }}" = "cpu" ]; then
            pip install torch==${{ matrix.torch-version }}+cpu --index-url https://download.pytorch.org/whl/cpu
          else
            pip install torch==${{ matrix.torch-version }}+${{ matrix.torch-cuda }} --index-url https://download.pytorch.org/whl/${{ matrix.torch-cuda }}
          fi
          pip install numpy
          if [ "${{ matrix.cuda-version }}" != "none" ]; then
            export CUDA_HOME=/usr/local/cuda-${{ matrix.cuda-version }}
            export PATH=$CUDA_HOME/bin:$PATH
            export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
          fi
        TORCH_CUDA_VERSION: ${{ matrix.cuda-version }}
        TORCH_CUDA_ARCH_LIST: ${{ env.TORCH_CUDA_ARCH_LIST }}
        CIBW_BUILD_FRONTEND: "pip"

      run: |
        cibuildwheel --platform linux

    - name: Create wheel renaming script
      run: |
        cat > rename_wheel.py << 'EOF'
        import zipfile
        import shutil
        import tempfile
        import os
        from pathlib import Path

        def rename_wheel(wheel_path, new_name):
            wheel_path = Path(wheel_path)
            new_path = wheel_path.parent / new_name

            with tempfile.TemporaryDirectory() as temp_dir:
                temp_dir = Path(temp_dir)

                # Extract wheel
                with zipfile.ZipFile(wheel_path, 'r') as zip_ref:
                    zip_ref.extractall(temp_dir)

                # Find .dist-info directory
                dist_info_dirs = list(temp_dir.glob('*.dist-info'))
                if not dist_info_dirs:
                    print(f"❌ No .dist-info directory found in {wheel_path}")
                    return False

                dist_info_dir = dist_info_dirs[0]

                # Rename .dist-info directory to match new wheel name
                new_dist_info_name = f"{new_name.replace('.whl', '')}.dist-info"
                new_dist_info_path = temp_dir / new_dist_info_name
                shutil.move(str(dist_info_dir), str(new_dist_info_path))

                # Create new wheel
                with zipfile.ZipFile(new_path, 'w', zipfile.ZIP_DEFLATED) as zip_ref:
                    for file_path in temp_dir.rglob('*'):
                        if file_path.is_file():
                            arcname = file_path.relative_to(temp_dir)
                            zip_ref.write(file_path, arcname)

            print(f"✅ Renamed wheel to: {new_name}")
            return True

        if __name__ == "__main__":
            import sys
            if len(sys.argv) != 3:
                print("Usage: python rename_wheel.py <wheel_path> <new_name>")
                sys.exit(1)
            rename_wheel(sys.argv[1], sys.argv[2])
        EOF

    - name: Rename wheels to PyTorch ecosystem convention
      run: |
        # Get version from git tag or fallback
        VERSION=$(git describe --tags --dirty 2>/dev/null | sed 's/^v//' || echo "0.8.1")

        # Rename all wheels in wheelhouse using proper wheel tools
        for wheel in wheelhouse/*.whl; do
          if [ -f "$wheel" ]; then
            WHEEL_NAME=$(basename "$wheel")
            # Extract parts: torch_harmonics-0.8.1-cp310-cp310-linux_x86_64.whl
            IFS='-' read -ra PARTS <<< "$WHEEL_NAME"

            # Create new name with PyTorch and CUDA suffix: torch_harmonics-0.8.1+torch2.7.0+cpu-cp310-cp310-linux_x86_64.whl
            NEW_NAME="${PARTS[0]}-${PARTS[1]}+torch${{ matrix.torch-version }}+${{ matrix.torch-cuda }}-${PARTS[2]}-${PARTS[3]}-${PARTS[4]}"

            # Run the Python script
            python3 rename_wheel.py "$wheel" "$NEW_NAME"

            # Remove original wheel
            rm "$wheel"
            echo "✅ Renamed wheel to: $NEW_NAME"
          fi
        done

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheel-torch-${{ matrix.torch-version }}-${{ matrix.torch-cuda }}
        path: wheelhouse/*.whl

    - name: Upload to TestPyPI (for testing)
      if: github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
      run: |
        python -m pip install twine
        python -m twine upload --verbose --repository testpypi wheelhouse/*.whl

    - name: Upload to PyPI (production)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m pip install twine
        python -m twine upload wheelhouse/*.whl
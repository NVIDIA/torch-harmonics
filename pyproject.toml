[build-system]
requires = [ "setuptools", "setuptools-scm", "torch"]
build-backend = "setuptools.build_meta"

[project]
name = "torch_harmonics"
authors = [
    { name="Boris Bonev" },
    { name="Thorsten Kurth" },
    { name="Max Rietmann" },
    { name="Mauro Bisson" },
    { name="Andrea Paris" },
    { name="Alberto Carpentieri" },
    { name="Massimiliano Fatica" },
    { name="Jean Kossaifi" },
    { name="Nikola Kovachki" },
    { name="Christian Hundt" },
]

maintainers = [
    { name="Boris Bonev", email = "bbonev@nvidia.com" },
    { name="Thorsten Kurth", email = "tkurth@nvidia.com" },
]

readme = "README.md"

dynamic = ["version"]

description = "Differentiable signal processing on the sphere for PyTorch."
requires-python = ">=3.9"

classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.9",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
]

dependencies = [
    "torch>=2.4.0",
    "numpy>=1.22.4",
]


[tool.setuptools.dynamic]
version = {attr = "torch_harmonics.__version__"}

[tool.setuptools.packages.find]
    include = ["torch_harmonics*"]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "coverage>=6.5.0",
]
2d3ds = [
    "requests",
    "tarfile",
    "tqdm",
    "PIL",
    "h5py",
]

[tool.black]
line-length = 180

[tool.cibuildwheel]
# Build for Python 3.10, 3.11, 3.12
build = ["cp310-*", "cp311-*", "cp312-*"]
build-frontend = "pip"

# Use manylinux for Linux wheels
manylinux-x86_64-image = "manylinux_2_28"
manylinux-i686-image = "manylinux_2_28"

# Build options

# Test the built wheel
test-command = "python -c 'import torch_harmonics; print(\"torch_harmonics imported successfully\"); from torch_harmonics.disco import optimized_kernels_is_available; print(\"optimized kernels are available: {optimized_kernels_is_available()}\")'"

# Repair wheels with auditwheel - exclude all system, PyTorch, and CUDA libraries
repair-wheel-command = "auditwheel repair --exclude 'libc.so*' --exclude 'libm.so*' --exclude 'libpthread.so*' --exclude 'libdl.so*' --exclude 'libutil.so*' --exclude 'libnsl.so*' --exclude 'libresolv.so*' --exclude 'libcrypt.so*' --exclude 'libnss.so*' --exclude 'libselinux.so*' --exclude 'libpcre.so*' --exclude 'libz.so*' --exclude 'libbz2.so*' --exclude 'liblzma.so*' --exclude 'libtinfo.so*' --exclude 'libncurses.so*' --exclude 'libreadline.so*' --exclude 'libhistory.so*' --exclude 'libform.so*' --exclude 'libmenu.so*' --exclude 'libpanel.so*' --exclude 'libgcc_s.so*' --exclude 'libstdc++.so*' --exclude 'libopenblas.so*' --exclude 'liblapack.so*' --exclude 'libgfortran.so*' --exclude 'libquadmath.so*' --exclude 'libtorch*.so*' --exclude 'libc10.so*' --exclude 'libcudart.so*' --exclude 'libcublas.so*' --exclude 'libcurand.so*' --exclude 'libcusparse.so*' --exclude 'libcufft.so*' --exclude 'libcusolver.so*' --exclude 'libnvrtc.so*' --exclude 'libnvjpeg.so*' --exclude 'libcudnn.so*' -w {dest_dir} {wheel}"

# Skip building for platforms we don't support
skip = ["*-win32", "*-win_amd64", "*-macosx_arm64", "*-musllinux*"]